// Code generated by "bitstringer -type=EventFlags"; DO NOT EDIT

package perffile

import "strconv"

func (i EventFlags) String() string {
	if i == 0 {
		return "0"
	}
	s := ""
	if i&EventFlagAuxOutput != 0 {
		s += "AuxOutput|"
	}
	if i&EventFlagBuildID != 0 {
		s += "BuildID|"
	}
	if i&EventFlagCGroup != 0 {
		s += "CGroup|"
	}
	if i&EventFlagClockID != 0 {
		s += "ClockID|"
	}
	if i&EventFlagComm != 0 {
		s += "Comm|"
	}
	if i&EventFlagCommExec != 0 {
		s += "CommExec|"
	}
	if i&EventFlagContextSwitch != 0 {
		s += "ContextSwitch|"
	}
	if i&EventFlagDisabled != 0 {
		s += "Disabled|"
	}
	if i&EventFlagEnableOnExec != 0 {
		s += "EnableOnExec|"
	}
	if i&EventFlagExcludeCallchainKernel != 0 {
		s += "ExcludeCallchainKernel|"
	}
	if i&EventFlagExcludeCallchainUser != 0 {
		s += "ExcludeCallchainUser|"
	}
	if i&EventFlagExcludeGuest != 0 {
		s += "ExcludeGuest|"
	}
	if i&EventFlagExcludeHost != 0 {
		s += "ExcludeHost|"
	}
	if i&EventFlagExcludeHypervisor != 0 {
		s += "ExcludeHypervisor|"
	}
	if i&EventFlagExcludeIdle != 0 {
		s += "ExcludeIdle|"
	}
	if i&EventFlagExcludeKernel != 0 {
		s += "ExcludeKernel|"
	}
	if i&EventFlagExcludeUser != 0 {
		s += "ExcludeUser|"
	}
	if i&EventFlagExclusive != 0 {
		s += "Exclusive|"
	}
	if i&EventFlagFreq != 0 {
		s += "Freq|"
	}
	if i&EventFlagInherit != 0 {
		s += "Inherit|"
	}
	if i&EventFlagInheritStat != 0 {
		s += "InheritStat|"
	}
	if i&EventFlagInheritThread != 0 {
		s += "InheritThread|"
	}
	if i&EventFlagKsymbol != 0 {
		s += "Ksymbol|"
	}
	if i&EventFlagMmap != 0 {
		s += "Mmap|"
	}
	if i&EventFlagMmapData != 0 {
		s += "MmapData|"
	}
	if i&EventFlagMmapInodeData != 0 {
		s += "MmapInodeData|"
	}
	if i&EventFlagNamespaces != 0 {
		s += "Namespaces|"
	}
	if i&EventFlagPinned != 0 {
		s += "Pinned|"
	}
	if i&EventFlagSampleIDAll != 0 {
		s += "SampleIDAll|"
	}
	if i&EventFlagTask != 0 {
		s += "Task|"
	}
	if i&EventFlagTextPoke != 0 {
		s += "TextPoke|"
	}
	if i&EventFlagWakeupWatermark != 0 {
		s += "WakeupWatermark|"
	}
	if i&EventFlagWriteBackward != 0 {
		s += "WriteBackward|"
	}
	i &^= 34359640063
	if i == 0 {
		return s[:len(s)-1]
	}
	return s + "0x" + strconv.FormatUint(uint64(i), 16)
}
