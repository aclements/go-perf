// Copyright 2015 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// +build ignore

// Command makestatic reads all files from "static/" and generates
// "static.go", which declares a map from file name strings to strings
// containing the contents of the input files.
package main

import (
	"bufio"
	"bytes"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"strings"
	"unicode/utf8"
)

func main() {
	f, err := os.Create("static.go")
	if err != nil {
		log.Fatal(err)
	}
	defer f.Close()

	w := bufio.NewWriter(f)
	fmt.Fprintf(w, `// DO NOT EDIT. Generated by makestatic.go

package main

import "time"

func init() {
	staticFiles = mapFS{
`)
	filepath.Walk("static", func(path string, info os.FileInfo, err error) error {
		if err != nil {
			log.Fatal(err)
		}
		if strings.Contains(path, "/demo") || strings.Contains(path, "/test") || strings.Contains(path, "README") {
			return nil
		}
		if info.IsDir() {
			path += "/"
		}
		fmt.Fprintf(w, "\t%q: {%q, time.Unix(0, %d), %v, ", path[6:], path[6:], info.ModTime().UnixNano(), info.IsDir())
		if info.IsDir() {
			fmt.Fprintf(w, "``")
		} else {
			b, err := ioutil.ReadFile(path)
			if err != nil {
				log.Fatal(err)
			}
			if utf8.Valid(b) {
				fmt.Fprintf(w, "`%s`", sanitize(b))
			} else {
				fmt.Fprintf(w, "%q", b)
			}
		}
		fmt.Fprintf(w, "},\n")
		return nil
	})
	fmt.Fprintln(w, "\t}")
	fmt.Fprintln(w, "}")
	if err := w.Flush(); err != nil {
		log.Fatal(err)
	}
	if err := f.Close(); err != nil {
		log.Fatal(err)
	}
}

// sanitize prepares a valid UTF-8 string as a raw string constant.
func sanitize(b []byte) []byte {
	// Replace ` with `+"`"+`
	return bytes.Replace(b, []byte("`"), []byte("`+\"`\"+`"), -1)
}
